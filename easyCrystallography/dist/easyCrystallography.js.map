{"version":3,"sources":["@@/easyCrystallography/dist/lib/index.js","@@/easyCrystallography/dist/lib/graphics/bokeh_extensions/index.js","@@/easyCrystallography/dist/lib/graphics/bokeh_extensions/ngl_viewer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACRA;AACA;AACA;AACA;AACA;AACA,ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/* index.js */ function _(require, module, exports, __esModule, __esExport) {\n    __esModule();\n    const tslib_1 = require(\"tslib\");\n    const easyCrystallographyExtensions = (0, tslib_1.__importStar)(require(\"153c19733b\") /* ./graphics/bokeh_extensions/ */);\n    exports.easyCrystallographyExtensions = easyCrystallographyExtensions;\n    const base_1 = require(\"@bokehjs/base\");\n    (0, base_1.register_models)(easyCrystallographyExtensions);\n}\n","/* graphics/bokeh_extensions/index.js */ function _(require, module, exports, __esModule, __esExport) {\n    __esModule();\n    var ngl_viewer_1 = require(\"584f8ea9f3\") /* ./ngl_viewer */;\n    __esExport(\"NGLViewer\", ngl_viewer_1.NGLViewer);\n}\n","/* graphics/bokeh_extensions/ngl_viewer.js */ function _(require, module, exports, __esModule, __esExport) {\n    __esModule();\n    const html_box_1 = require(\"@bokehjs/models/layouts/html_box\");\n    class NGLViewerView extends html_box_1.HTMLBoxView {\n        connect_signals() {\n            super.connect_signals();\n            this.connect(this.model.properties.object.change, this.updateStage);\n            this.connect(this.model.properties.extension.change, this.updateStage);\n            this.connect(this.model.properties.representation.change, this.updateStage);\n            this.connect(this.model.properties.color_scheme.change, this.updateParameters);\n            this.connect(this.model.properties.custom_color_scheme.change, this.updateParameters);\n            this.connect(this.model.properties.effect.change, this.updateEffect);\n            this.connect(this.model.properties.background.change, this.setBackgroundcolor);\n        }\n        render() {\n            super.render();\n            this.el.id = \"viewport\";\n            const wn = window;\n            const ngl = wn.NGL;\n            this._stage = new ngl.Stage(this.el);\n            this.setBackgroundcolor();\n            const stage = this._stage;\n            this.updateStage();\n            window.addEventListener(\"resize\", function () {\n                stage.handleResize();\n            }, false);\n        }\n        setBackgroundcolor() {\n            console.log(this.model.background);\n            this._stage.setParameters({ backgroundColor: this.model.background });\n        }\n        after_layout() {\n            super.after_layout();\n            this._stage.handleResize();\n        }\n        updateEffect() {\n            if (this.model.effect === \"spin\") {\n                this._stage.setSpin(true);\n            }\n            else if (this.model.effect === \"rock\") {\n                this._stage.setRock(true);\n            }\n            else {\n                this._stage.setSpin(false);\n                this._stage.setRock(false);\n            }\n        }\n        getParameters() {\n            if (this.model.color_scheme === \"custom\") {\n                var list = this.model.custom_color_scheme;\n                var scheme = NGL.ColormakerRegistry.addSelectionScheme(list, \"new scheme\");\n                return { color: scheme };\n            }\n            else {\n                return { colorScheme: this.model.color_scheme };\n            }\n        }\n        updateParameters() {\n            const parameters = this.getParameters();\n            try {\n                this._stage.compList[0].reprList[0].setParameters(parameters);\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n        updateStage() {\n            const model = this.model;\n            this._stage.removeAllComponents();\n            if (model.object === \"\") {\n                return;\n            }\n            const parameters = this.getParameters();\n            function finish(o) {\n                o.addRepresentation(model.representation, parameters);\n                o.autoView();\n            }\n            if (model.extension !== \"\") {\n                this._stage.loadFile(new Blob([model.object], { type: 'text/plain' }), { ext: model.extension }).then(finish);\n            }\n            else if (model.object.includes(\"://\")) {\n                this._stage.loadFile(model.object).then(finish);\n            }\n            else {\n                this._stage.loadFile(\"rcsb://\" + model.object).then(finish);\n            }\n            // this.updateColor()\n            this.updateEffect();\n        }\n    }\n    exports.NGLViewerView = NGLViewerView;\n    NGLViewerView.__name__ = \"NGLViewerView\";\n    class NGLViewer extends html_box_1.HTMLBox {\n        constructor(attrs) {\n            super(attrs);\n        }\n        static init_NGLViewer() {\n            this.prototype.default_view = NGLViewerView;\n            this.define(({ String, Any }) => ({\n                object: [String, \"<button style='width:100%'>Click Me</button>\"],\n                extension: [String, \"cif\"],\n                representation: [String, \"ribbon\"],\n                color_scheme: [String, \"chainid\"],\n                custom_color_scheme: [Any, \"chainid\"],\n                effect: [String, \"\"],\n                // background:               [ String, \"white\"], // This crashes the code :/\n            }));\n            this.override({\n                height: 400,\n                width: 600\n            });\n        }\n    }\n    exports.NGLViewer = NGLViewer;\n    NGLViewer.__name__ = \"NGLViewer\";\n    NGLViewer.__module__ = \"easyCrystallography.graphics.bokeh_extensions.ngl_viewer\";\n    NGLViewer.init_NGLViewer();\n}\n"]}